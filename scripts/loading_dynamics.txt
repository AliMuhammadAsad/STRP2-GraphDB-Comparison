// ----------------------------- Dynamic Files with APOC -----------------------------------------
// Load Person
call apoc.periodic.iterate(
  'load csv with headers from "file:///dynamic/person_0_0.csv" as row fieldterminator "|" return row',
  'create (p:Person {id: toInteger(row.id), firstName: row.firstName, lastName: row.lastName, gender: row.gender, birthday: row.birthday, creationDate: row.creationDate, locationIP: row.locationIP, browserUsed: row.browserUsed, language: row.language, email: row.email})',
  {batchSize: 1000, iterateList: true}
);

// Load Forum
call apoc.periodic.iterate(
  'load csv with headers from "file:///dynamic/forum_0_0.csv" as row fieldterminator "|" return row',
  'create (f:Forum {id: toInteger(row.id), title: row.title, creationDate: row.creationDate})',
  {batchSize: 1000, iterateList: true}
);

// Load Post
call apoc.periodic.iterate(
  'load csv with headers from "file:///dynamic/post_0_0.csv" as row fieldterminator "|" return row',
  'create (p:Post {id: toInteger(row.id), imageFile: case row.imageFile when "" then null else row.imageFile end, creationDate: row.creationDate, locationIP: row.locationIP, browserUsed: row.browserUsed, language: row.language, content: row.content, length: toInteger(row.length)})',
  {batchSize: 1000, iterateList: true}
);


// Load Comment
call apoc.periodic.iterate(
  'load csv with headers from "file:///dynamic/comment_0_0.csv" as row fieldterminator "|" return row',
  'create (c:Comment {id: toInteger(row.id), creationDate: row.creationDate, locationIP: row.locationIP, browserUsed: row.browserUsed, content: row.content, length: toInteger(row.length)})',
  {batchSize: 1000, iterateList: true}
);


// ----------------------------------------- Relationships

// Load Forum has member Person
call apoc.periodic.iterate(
  'load csv with headers from "file:///dynamic/forum_hasMember_person_0_0.csv" as row fieldterminator "|" return row',
  'match (f:Forum {id: toInteger(row.`Forum.id`)}), (p:Person {id: toInteger(row.`Person.id`)}) create (f)-[:hasMember {creationDate: row.joinDate}]->(p)',
  {batchSize: 1000, iterateList: true}
);

// Load forum has moderator person
call apoc.periodic.iterate(
  'load csv with headers from "file:///dynamic/forum_hasModerator_person_0_0.csv" as row fieldterminator "|" return row',
  'match (f:Forum {id: toInteger(row.`Forum.id`)}), (p:Person {id: toInteger(row.`Person.id`)}) create (f)-[:hasModerator]->(p)',
  {batchSize: 1000, iterateList: true}
);

// Load Forum has Tag
call apoc.periodic.iterate(
  'load csv with headers from "file:///dynamic/forum_hasTag_tag_0_0.csv" as row fieldterminator "|" return row',
  'match (f:Forum {id: toInteger(row.`Forum.id`)}), (t:Tag {id: toInteger(row.`Tag.id`)}) create (f)-[:hasTag]->(t)',
  {batchSize: 1000, iterateList: true}
);

// Load Forum container of Post
call apoc.periodic.iterate(
  'load csv with headers from "file:///dynamic/forum_containerOf_post_0_0.csv" as row fieldterminator "|" return row',
  'match (f:Forum {id: toInteger(row.`Forum.id`)}), (p:Post {id: toInteger(row.`Post.id`)}) create (f)-[:containerOf]->(p)',
  {batchSize: 1000, iterateList: true}
);

// Load Post has Tag
call apoc.periodic.iterate(
  'load csv with headers from "file:///dynamic/post_hasTag_tag_0_0.csv" as row fieldterminator "|" return row',
  'match (p:Post {id: toInteger(row.`Post.id`)}), (t:Tag {id: toInteger(row.`Tag.id`)}) create (p)-[:hasTag]->(t)',
  {batchSize: 1000, iterateList: true}
);

// Load Post is located in Place
call apoc.periodic.iterate(
  'load csv with headers from "file:///dynamic/post_isLocatedIn_place_0_0.csv" as row fieldterminator "|" return row',
  'match (p:Post {id: toInteger(row.`Post.id`)}), (pl:Place {id: toInteger(row.`Place.id`)}) create (p)-[:isLocatedIn]->(pl)',
  {batchSize: 1000, iterateList: true}
);

// Post has Creator Person
call apoc.periodic.iterate(
  'load csv with headers from "file:///dynamic/post_hasCreator_person_0_0.csv" as row fieldterminator "|" return row',
  'match (p:Post {id: toInteger(row.`Post.id`)}), (pe:Person {id: toInteger(row.`Person.id`)}) create (p)-[:hasCreator]->(pe)',
  {batchSize: 1000, iterateList: true}
);


// Load Comment has Tag
call apoc.periodic.iterate(
  'load csv with headers from "file:///dynamic/comment_hasTag_tag_0_0.csv" as row fieldterminator "|" return row',
  'match (c:Comment {id: toInteger(row.`Comment.id`)}), (t:Tag {id: toInteger(row.`Tag.id`)}) create (c)-[:hasTag]->(t)',
  {batchSize: 1000, iterateList: true}
);

// Load Comment is located in Place
call apoc.periodic.iterate(
  'load csv with headers from "file:///dynamic/comment_isLocatedIn_place_0_0.csv" as row fieldterminator "|" return row',
  'match (c:Comment {id: toInteger(row.`Comment.id`)}), (p:Place {id: toInteger(row.`Place.id`)}) create (c)-[:isLocatedIn]->(p)',
  {batchSize: 1000, iterateList: true}
);

// Load Comment is reply of Comment
call apoc.periodic.iterate(
  'load csv with headers from "file:///dynamic/comment_replyOf_comment_0_0.csv" as row fieldterminator "|" return row',
  'match (c1:Comment {id: toInteger(row.`Comment1.id`)}), (c2:Comment {id: toInteger(row.`Comment2.id`)}) create (c1)-[:replyOf]->(c2)',
  {batchSize: 1000, iterateList: true}
);

// Load Comment is reply of Post
call apoc.periodic.iterate(
  'load csv with headers from "file:///dynamic/comment_replyOf_post_0_0.csv" as row fieldterminator "|" return row',
  'match (c:Comment {id: toInteger(row.`Comment.id`)}), (p:Post {id: toInteger(row.`Post.id`)}) create (c)-[:replyOfPost]->(p)',
  {batchSize: 1000, iterateList: true}
);

// Load Comment has Creator Person
call apoc.periodic.iterate(
  'load csv with headers from "file:///dynamic/comment_hasCreator_person_0_0.csv" as row fieldterminator "|" return row',
  'match (c:Comment {id: toInteger(row.`Comment.id`)}), (p:Person {id: toInteger(row.`Person.id`)}) create (c)-[:hasCreator]->(p)',
  {batchSize: 1000, iterateList: true}
);


// Load Person Likes (Post)
call apoc.periodic.iterate(
  'load csv with headers from "file:///dynamic/person_likes_post_0_0.csv" as row fieldterminator "|" return row',
  'match (p:Person {id: toInteger(row.`Person.id`)}), (post:Post {id: toInteger(row.`Post.id`)}) create (p)-[:likes {creationDate: row.creationDate}]->(post)',
  {batchSize: 1000, iterateList: true}
);

// Load Person Likes (Comment)
call apoc.periodic.iterate(
  'load csv with headers from "file:///dynamic/person_likes_comment_0_0.csv" as row fieldterminator "|" return row',
  'match (p:Person {id: toInteger(row.`Person.id`)}), (c:Comment {id: toInteger(row.`Comment.id`)}) create (p)-[:likes {creationDate: row.creationDate}]->(c)',
  {batchSize: 1000, iterateList: true}
);

// Load Person Knows Person
call apoc.periodic.iterate(
  'load csv with headers from "file:///dynamic/person_knows_person_0_0.csv" as row fieldterminator "|" return row',
  'match (p1:Person {id: toInteger(row.`Person1.id`)}), (p2:Person {id: toInteger(row.`Person2.id`)}) create (p1)-[:knows {creationDate: row.creationDate}]->(p2)',
  {batchSize: 1000, iterateList: true}
);

// Load Person has Interest Tag
call apoc.periodic.iterate(
  'load csv with headers from "file:///dynamic/person_hasInterest_tag_0_0.csv" as row fieldterminator "|" return row',
  'match (p:Person {id: toInteger(row.`Person.id`)}), (t:Tag {id: toInteger(row.`Tag.id`)}) create (p)-[:hasInterest]->(t)',
  {batchSize: 1000, iterateList: true}
);

// Load Person study at University
call apoc.periodic.iterate(
  'load csv with headers from "file:///dynamic/person_studyAt_organisation_0_0.csv" as row fieldterminator "|" return row',
  'match (p:Person {id: toInteger(row.`Person.id`)}), (o:Organisation {id: toInteger(row.`Organisation.id`)}) create (p)-[:studyAt {classYear: toInteger(row.classYear)}]->(o)',
  {batchSize: 1000, iterateList: true}
);

// Load Person Company
call apoc.periodic.iterate(
  'load csv with headers from "file:///dynamic/person_workAt_organisation_0_0.csv" as row fieldterminator "|" return row',
  'match (p:Person {id: toInteger(row.`Person.id`)}), (o:Organisation {id: toInteger(row.`Organisation.id`)}) create (p)-[:workAt {workFrom: toInteger(row.workFrom)}]->(o)',
  {batchSize: 1000, iterateList: true}
);

// Person is Located In Place
call apoc.periodic.iterate(
  'load csv with headers from "file:///dynamic/person_isLocatedIn_place_0_0.csv" as row fieldterminator "|" return row',
  'match (p:Person {id: toInteger(row.`Person.id`)}), (p:Place {id: toInteger(row.`Place.id`)}) create (p)-[:isLocatedIn]->(p)',
  {batchSize: 1000, iterateList: true}
);


// ----------------------------- Dynamic Files without APOC -----------------------------------------
// Load Person
load csv with headers from 'file:///dynamic/person_0_0.csv' as row fieldterminator '|'
create (p:Person {id: toInteger(row.id), firstName: row.firstName, lastName: row.lastName, gender: row.gender, birthday: row.birthday, creationDate: row.creationDate, locationIP: row.locationIP, browserUsed: row.browserUsed, language: row.language, email:row.email
});

// Load Forum
load csv with headers from 'file:///dynamic/forum_0_0.csv' as row fieldterminator "|"
create (f:Forum {id: toInteger(row.id), title: row.title, creationDate: row.creationDate});

// Load Post
load csv with headers from 'file:///dynamic/post_0_0.csv' as row fieldterminator "|"
create (p:Post {id: toInteger(row.id), imageFile: case row.imageFile when '' then null else row.imageFile end, creationDate: row.creationDate, locationIP: row.locationIP, browserUsed: row.browserUsed, language: row.language, content: row.content, length: toInteger(row.length)});

// Load Comment
load csv with headers from 'file:///dynamic/comment_0_0.csv' as row fieldterminator "|"
create (c:Comment {id: toInteger(row.id), creationDate: row.creationDate, locationIP: row.locationIP, browserUsed: row.browserUsed, content: row.content, length: toInteger(row.length)
});


// ----------------------------------------- Relationships 
// Load Forum has Member Person
load csv with headers from 'file:///dynamic/forum_hasMember_person_0_0.csv' as row fieldterminator "|"
match (f:Forum {id: toInteger(row.`Forum.id`)}), (p:Person {id: toInteger(row.`Person.id`)})
create (f)-[:hasMember {creationDate: row.joinDate}]->(p);

// Load Forum has Moderator Person
load csv with headers from 'file:///dynamic/forum_hasModerator_person_0_0.csv' as row fieldterminator "|"
match (f:Forum {id: toInteger(row.`Forum.id`)}), (p:Person {id: toInteger(row.`Person.id`)})
create (f)-[:hasModerator]->(p);


// Load Forum has Tag
load csv with headers from 'file:///dynamic/forum_hasTag_tag_0_0.csv' as row fieldterminator "|"
match (f:Forum {id: toInteger(row.`Forum.id`)}), (t:Tag {id: toInteger(row.`Tag.id`)})
create (f)-[:hasTag]->(t);

// Load Forum container of Post
load csv with headers from 'file:///dynamic/forum_containerOf_post_0_0.csv' as row fieldterminator "|"
match (f:Forum {id: toInteger(row.`Forum.id`)}), (p:Post {id: toInteger(row.`Post.id`)})
create (f)-[:containerOf]->(p);

// Load Post has Tag
load csv with headers from 'file:///dynamic/post_hasTag_tag_0_0.csv' as row fieldterminator "|"
match (p:Post {id: toInteger(row.`Post.id`)}), (t:Tag {id: toInteger(row.`Tag.id`)})
create (p)-[:hasTag]->(t);

// Load Post is located in Place
load csv with headers from 'file:///dynamic/post_isLocatedIn_place_0_0.csv' as row fieldterminator "|"
match (p:Post {id: toInteger(row.`Post.id`)}), (pl:Place {id: toInteger(row.`Place.id`)})
create (p)-[:isLocatedIn]->(pl);

// Load Post has Creator Person
load csv with headers from 'file:///dynamic/post_hasCreator_person_0_0.csv' as row fieldterminator "|"
match (p:Post {id: toInteger(row.`Post.id`)}), (pe:Person {id: toInteger(row.`Person.id`)})
create (p)-[:hasCreator]->(pe);


// Load Comment has Tag
load csv with headers from 'file:///dynamic/comment_hasTag_tag_0_0.csv' as row fieldterminator "|"
match (c:Comment {id: toInteger(row.`Comment.id`)}), (t:Tag {id: toInteger(row.`Tag.id`)})
create (c)-[:hasTag]->(t);

// Load Comment is located in Place
load csv with headers from 'file:///dynamic/comment_isLocatedIn_place_0_0.csv' as row fieldterminator "|"
match (c:Comment {id: toInteger(row.`Comment.id`)}), (p:Place {id: toInteger(row.`Place.id`)})
create (c)-[:isLocatedIn]->(p);

// Load Comment is Reply of Comment
load csv with headers from 'file:///dynamic/comment_replyOf_comment_0_0.csv' as row fieldterminator "|"
match (c1:Comment {id: toInteger(row.`Comment1.id`)}), (c2:Comment {id: toInteger(row.`Comment2.id`)})
create (c1)-[:replyOf]->(c2);

// Load Comment is Reply of Post
load csv with headers from 'file:///dynamic/comment_replyOf_post_0_0.csv' as row fieldterminator "|"
match (c:Comment {id: toInteger(row.`Comment.id`)}), (p:Post {id: toInteger(row.`Post.id`)})
create (c)-[:replyOfPost]->(p);

// Load Comment has creator Person
load csv with headers from 'file:///dynamic/comment_hasCreator_person_0_0.csv' as row fieldterminator "|"
match (c:Comment {id: toInteger(row.`Comment.id`)}), (p:Person {id: toInteger(row.`Person.id`)})
create (c)-[:hasCreator]->(p);

// Load Person Likes (Post)
load csv with headers from 'file:///dynamic/person_likes_post_0_0.csv' as row fieldterminator "|"
match (p:Person {id: toInteger(row.`Person.id`)}), (post:Post {id: toInteger(row.`Post.id`)})
create (p)-[:likes {creationDate: row.creationDate}]->(post);

// Load Person Likes (Comment)
load csv with headers from 'file:///dynamic/person_likes_comment_0_0.csv' as row fieldterminator "|"
match (p:Person {id: toInteger(row.`Person.id`)}), (c:Comment {id: toInteger(row.`Comment.id`)})
create (p)-[:likes {creationDate: row.creationDate}]->(c);


// Load Person Knows Person
load csv with headers from 'file:///dynamic/person_knows_person_0_0.csv' as row fieldterminator "|"
match (p1:Person {id: toInteger(row.`Person1.id`)}), (p2:Person {id: toInteger(row.`Person2.id`)})
create (p1)-[:knows {creationDate: row.creationDate}]->(p2);

// Load Person has interest Tag
load csv with headers from 'file:///dynamic/person_hasInterest_tag_0_0.csv' as row fieldterminator "|"
match (p:Person {id: toInteger(row.`Person.id`)}), (t:Tag {id: toInteger(row.`Tag.id`)})
create (p)-[:hasInterest]->(t);

// Load Person study at University
load csv with headers from 'file:///dynamic/person_studyAt_organisation_0_0.csv' as row fieldterminator "|"
match (p:Person {id: toInteger(row.`Person.id`)}), (o:Organisation {id: toInteger(row.`Organisation.id`)})
create (p)-[:studyAt {classYear: toInteger(row.classYear)}]->(o);

// Load Person works at Company
load csv with headers from 'file:///dynamic/person_workAt_organisation_0_0.csv' as row fieldterminator "|"
match (p:Person {id: toInteger(row.`Person.id`)}), (o:Organisation {id: toInteger(row.`Organisation.id`)})
create (p)-[:workAt {workFrom: toInteger(row.workFrom)}]->(o);

// Load Person is Located in Place
load csv with headers from 'file:///dynamic/person_isLocatedIn_place_0_0.csv' as row fieldterminator "|"
match (p:Person {id: toInteger(row.`Person.id`)}), (pl:Place {id: toInteger(row.`Place.id`)})
create (p)-[:isLocatedIn]->(pl);


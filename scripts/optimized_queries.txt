CREATE INDEX ON :Organisation(id);
CREATE INDEX ON :Place(id);
CREATE INDEX ON :TagClass(id);
CREATE INDEX ON :Tag(id);
CREATE INDEX ON :Person(id);
CREATE INDEX ON :Forum(id);
CREATE INDEX ON :Post(id);
CREATE INDEX ON :Comment(id);


// Load Organisation
LOAD CSV FROM '/usr/lib/memgraph/organisation_0_0.csv' WITH HEADER DELIMITER '|' AS row
CREATE (:Organisation {id: toInteger(row.id)})
ON CREATE SET 
    Organisation.type = row.type,
    Organisation.name = row.name,
    Organisation.url = row.url;

// Load Place
LOAD CSV FROM '/usr/lib/memgraph/place_0_0.csv' WITH HEADER DELIMITER '|' AS row
CREATE (:Place {id: toInteger(row.id)})
ON CREATE SET
    Place.name = row.name,
    Place.url = row.url,
    Place.type = row.type;

// Load TagClass
LOAD CSV FROM '/usr/lib/memgraph/tagclass_0_0.csv' WITH HEADER DELIMITER '|' AS row
CREATE (:TagClass {id: toInteger(row.id)})
ON CREATE SET
    TagClass.name = row.name,
    TagClass.url = row.url;

// Load Tag
LOAD CSV FROM '/usr/lib/memgraph/tag_0_0.csv' WITH HEADER DELIMITER '|' AS row
CREATE (:Tag {id: toInteger(row.id)})
ON CREATE SET
    Tag.name = row.name,
    Tag.url = row.url;

// Organisation Located In Place
LOAD CSV FROM '/usr/lib/memgraph/organisation_isLocatedIn_place_0_0.csv' WITH HEADER DELIMITER '|' AS row
MATCH (o:Organisation {id: toInteger(row.`Organisation.id`)}), (p:Place {id: toInteger(row.`Place.id`)})
CREATE (o)-[:isLocatedIn]->(p);

// Place is Part of Place
LOAD CSV FROM '/usr/lib/memgraph/place_isPartOf_place_0_0.csv' WITH HEADER DELIMITER '|' AS row
MATCH (p1:Place {id: toInteger(row.`Place1.id`)}), (p2:Place {id: toInteger(row.`Place2.id`)})
CREATE (p1)-[:isPartOf]->(p2);

// Tag has Type TagClass
LOAD CSV FROM '/usr/lib/memgraph/tag_hasType_tagclass_0_0.csv' WITH HEADER DELIMITER '|' AS row
MATCH (t:Tag {id: toInteger(row.`Tag.id`)}), (tc:TagClass {id: toInteger(row.`TagClass.id`)})
CREATE (t)-[:hasType]->(tc);

// TagClass is SubClass of TagClass
LOAD CSV FROM '/usr/lib/memgraph/tagclass_isSubclassOf_tagclass_0_0.csv' WITH HEADER DELIMITER '|' AS row
MATCH (tc1:TagClass {id: toInteger(row.`TagClass1.id`)}), (tc2:TagClass {id: toInteger(row.`TagClass2.id`)})
CREATE (tc1)-[:isSubclassOf]->(tc2);

// Load Person
LOAD CSV FROM '/usr/lib/memgraph/person_0_0.csv' WITH HEADER DELIMITER '|' AS row
CREATE (:Person {id: toInteger(row.id)})
ON CREATE SET
    Person.firstName = row.firstName,
    Person.lastName = row.lastName,
    Person.gender = row.gender,
    Person.birthday = row.birthday,
    Person.creationDate = row.creationDate,
    Person.locationIP = row.locationIP,
    Person.browserUsed = row.browserUsed,
    Person.language = row.language,
    Person.email = row.email;

// Load Forum
LOAD CSV FROM '/usr/lib/memgraph/forum_0_0.csv' WITH HEADER DELIMITER '|' AS row
CREATE (:Forum {id: toInteger(row.id)})
ON CREATE SET
    Forum.title = row.title,
    Forum.creationDate = row.creationDate;

// Load Post
LOAD CSV FROM '/usr/lib/memgraph/post_0_0.csv' WITH HEADER DELIMITER '|' AS row
CREATE (:Post {id: toInteger(row.id)})
ON CREATE SET
    Post.imageFile = CASE row.imageFile WHEN '' THEN null ELSE row.imageFile END,
    Post.creationDate = row.creationDate,
    Post.locationIP = row.locationIP,
    Post.browserUsed = row.browserUsed,
    Post.language = row.language,
    Post.content = row.content,
    Post.length = toInteger(row.length);

// Load Comment
LOAD CSV FROM '/usr/lib/memgraph/comment_0_0.csv' WITH HEADER DELIMITER '|' AS row
CREATE (:Comment {id: toInteger(row.id)})
ON CREATE SET
    Comment.creationDate = row.creationDate,
    Comment.locationIP = row.locationIP,
    Comment.browserUsed = row.browserUsed,
    Comment.content = row.content,
    Comment.length = toInteger(row.length);

// Forum has Member Person
LOAD CSV FROM '/usr/lib/memgraph/forum_hasMember_person_0_0.csv' WITH HEADER DELIMITER '|' as row
MATCH (f:Forum {id: toInteger(row.`Forum.id`)}), (p:Person {id: toInteger(row.`Person.id`)})
CREATE (f)-[:hasMember {creationDate: row.joinDate}]->(p);

// Forum has Moderator Person
LOAD CSV FROM '/usr/lib/memgraph/forum_hasModerator_person_0_0.csv' WITH HEADER DELIMITER '|' as row
MATCH (f:Forum {id: toInteger(row.`Forum.id`)}), (p:Person {id: toInteger(row.`Person.id`)})
CREATE (f)-[:hasModerator]->(p);

// Forum has Tag
LOAD CSV FROM '/usr/lib/memgraph/forum_hasTag_tag_0_0.csv' WITH HEADER DELIMITER '|' as row
MATCH (f:Forum {id: toInteger(row.`Forum.id`)}), (t:Tag {id: toInteger(row.`Tag.id`)})
CREATE (f)-[:hasTag]->(t);

// Forum container of Post
LOAD CSV FROM '/usr/lib/memgraph/forum_containerOf_post_0_0.csv' WITH HEADER DELIMITER '|' as row
MATCH (f:Forum {id: toInteger(row.`Forum.id`)}), (p:Post {id: toInteger(row.`Post.id`)})
CREATE (f)-[:containerOf]->(p);

// Post has Tag
LOAD CSV FROM '/usr/lib/memgraph/post_hasTag_tag_0_0.csv' WITH HEADER DELIMITER '|' as row
MATCH (p:Post {id: toInteger(row.`Post.id`)}), (t:Tag {id: toInteger(row.`Tag.id`)})
CREATE (p)-[:hasTag]->(t);

// Post is located in Place
LOAD CSV FROM '/usr/lib/memgraph/post_isLocatedIn_place_0_0.csv' WITH HEADER DELIMITER '|' as row
MATCH (p:Post {id: toInteger(row.`Post.id`)}), (pl:Place {id: toInteger(row.`Place.id`)})
CREATE (p)-[:isLocatedIn]->(pl);

// Post has Creator Person
LOAD CSV FROM '/usr/lib/memgraph/post_hasCreator_person_0_0.csv' WITH HEADER DELIMITER '|' as row
MATCH (p:Post {id: toInteger(row.`Post.id`)}), (pe:Person {id: toInteger(row.`Person.id`)})
CREATE (p)-[:hasCreator]->(pe);

// Comment has Tag
LOAD CSV FROM '/usr/lib/memgraph/comment_hasTag_tag_0_0.csv' WITH HEADER DELIMITER '|' as row
MATCH (c:Comment {id: toInteger(row.`Comment.id`)}), (t:Tag {id: toInteger(row.`Tag.id`)})
CREATE (c)-[:hasTag]->(t);

// Comment is located in Place
LOAD CSV FROM '/usr/lib/memgraph/comment_isLocatedIn_place_0_0.csv' WITH HEADER DELIMITER '|' as row
MATCH (c:Comment {id: toInteger(row.`Comment.id`)}), (p:Place {id: toInteger(row.`Place.id`)})
CREATE (c)-[:isLocatedIn]->(p);

// Comment is Reply of Comment
LOAD CSV FROM '/usr/lib/memgraph/comment_replyOf_comment_0_0.csv' WITH HEADER DELIMITER '|' as row
MATCH (c1:Comment {id: toInteger(row.`Comment1.id`)}), (c2:Comment {id: toInteger(row.`Comment2.id`)})
CREATE (c1)-[:replyOf]->(c2)

// Comment is Reply of Post
LOAD CSV FROM '/usr/lib/memgraph/comment_replyOf_post_0_0.csv' WITH HEADER DELIMITER '|' as row
MATCH (c:Comment {id: toInteger(row.`Comment.id`)}), (p:Post {id: toInteger(row.`Post.id`)})
CREATE (c)-[:replyOf]->(p);

// Comment has Creator Person
LOAD CSV FROM '/usr/lib/memgraph/comment_hasCreator_person_0_0.csv' WITH HEADER DELIMITER '|' as row
MATCH (c:Comment {id: toInteger(row.`Comment.id`)}), (p:Person {id: toInteger(row.`Person.id`)})
CREATE (c)-[:hasCreator]->(p);

// Person Likes (Post)
LOAD CSV FROM '/usr/lib/memgraph/person_likes_post_0_0.csv' WITH HEADER DELIMITER '|' as row
MATCH (p:Person {id: toInteger(row.`Person.id`)}), (post:Post {id: toInteger(row.`Post.id`)})
CREATE (p)-[:likes {creationDate: row.creationDate}]->(post);

// Person Likes (Comment)
LOAD CSV FROM '/usr/lib/memgraph/person_likes_comment_0_0.csv' WITH HEADER DELIMITER '|' as row
MATCH (p:Person {id: toInteger(row.`Person.id`)}), (c:Comment {id: toInteger(row.`Comment.id`)})
CREATE (p)-[:likes {creationDate: row.creationDate}]->(c);

// Person knows Person
LOAD CSV FROM '/usr/lib/memgraph/person_knows_person_0_0.csv' WITH HEADER DELIMITER '|' as row
MATCH (p1:Person {id: toInteger(row.`Person1.id`)}), (p2:Person {id: toInteger(row.`Person2.id`)})
CREATE (p1)-[:knows {creationDate: row.creationDate}]->(p2);

// Person has Interest Tag
LOAD CSV FROM '/usr/lib/memgraph/person_hasInterest_tag_0_0.csv' WITH HEADER DELIMITER '|' as row
MATCH (p:Person {id: toInteger(row.`Person.id`)}), (t:Tag {id: toInteger(row.`Tag.id`)})
CREATE (p)-[:hasInterest]->(t);

// Person study at University
LOAD CSV FROM '/usr/lib/memgraph/person_studyAt_organisation_0_0.csv' WITH HEADER DELIMITER '|' as row
MATCH (p:Person {id: toInteger(row.`Person.id`)}), (o:Organisation {id: toInteger(row.`Organisation.id`)})
CREATE (p)-[:studyAt {classYear: toInteger(row.classYear)}]->(o);

// Person work at Company
LOAD CSV FROM '/usr/lib/memgraph/person_workAt_organisation_0_0.csv' WITH HEADER DELIMITER '|' as row
MATCH (p:Person {id: toInteger(row.`Person.id`)}), (o:Organisation {id: toInteger(row.`Organisation.id`)})
CREATE (p)-[:workAt {workFrom: toInteger(row.workFrom)}]->(o);

// Person is Located in Place
OAD CSV FROM '/usr/lib/memgraph/person_isLocatedIn_place_0_0.csv' WITH HEADER DELIMITER '|' as row
MATCH (p:Person {id: toInteger(row.`Person.id`)}), (pl:Place {id: toInteger(row.`Place.id`)})
CREATE (p)-[:isLocatedIn]->(pl);
